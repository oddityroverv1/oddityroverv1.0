# Makefile.in generated by automake 1.16.5 from Makefile.am.
# unit-tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



VPATH = /home/rudranil/oddity_rover/build/lely_core_libraries/upstream/unit-tests
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/lely-core
pkgincludedir = $(includedir)/lely-core
pkglibdir = $(libdir)/lely-core
pkglibexecdir = $(libexecdir)/lely-core
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
target_triplet = x86_64-pc-linux-gnu
#am__append_1 = $(CODE_COVERAGE_LIBS)
#am__append_2 = -lpthread
am__append_3 = liblelyco_val_override.la
am__append_4 = util/test-bitset.cpp
am__append_5 = util/test-mutex.cpp
am__append_6 = util/test-sllist.cpp \
	util/test-spscring.cpp
#am__append_7 = util/test-diag.cpp
am__append_8 = util/test-diag.cpp
#am__append_9 = util/test-diag.cpp
#am__append_10 = override/lelyco-val.cpp
am__append_11 = -DLELY_ENABLE_SHARED=1
am__append_12 = -DCPPUTEST_MEM_LEAK_DETECTION_DISABLED
#am__append_13 = $(CODE_COVERAGE_CPPFLAGS)
#am__append_14 = $(CODE_COVERAGE_CFLAGS)
#am__append_15 = $(CODE_COVERAGE_CXXFLAGS)
#am__append_16 = -all-static
check_PROGRAMS = $(am__EXEEXT_1)
subdir = unit-tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_code_coverage.m4 \
	$(top_srcdir)/m4/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/m4/ax_pthread.m4 \
	$(top_srcdir)/m4/ax_valgrind_check.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = test-cpputest$(EXEEXT) unit-test-util$(EXEEXT) \
	unit-test-can$(EXEEXT) unit-test-co$(EXEEXT)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
liblelyco_val_override_la_DEPENDENCIES =
am__liblelyco_val_override_la_SOURCES_DIST = override/lelyco-val.hpp \
	override/lelyco-val.cpp
am__dirstamp = $(am__leading_dot)dirstamp
am__objects_1 = override/liblelyco_val_override_la-lelyco-val.lo
am_liblelyco_val_override_la_OBJECTS =  \
	$(am__objects_1)
liblelyco_val_override_la_OBJECTS =  \
	$(am_liblelyco_val_override_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
liblelyco_val_override_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(AM_CXXFLAGS) $(CXXFLAGS) \
	$(liblelyco_val_override_la_LDFLAGS) $(LDFLAGS) -o $@
am_liblelyco_val_override_la_rpath =  \
	-rpath $(libdir)
am__objects_2 = override/override-test-plugin.$(OBJEXT) \
	tests-shared-main.$(OBJEXT)
am_test_cpputest_OBJECTS = $(am__objects_2) test-cpputest.$(OBJEXT)
test_cpputest_OBJECTS = $(am_test_cpputest_OBJECTS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
test_cpputest_DEPENDENCIES = $(am__DEPENDENCIES_2)
am__objects_3 = can/test-buf.$(OBJEXT) can/test-msg.$(OBJEXT) \
	can/test-net.$(OBJEXT)
am_unit_test_can_OBJECTS = $(am__objects_2) $(am__objects_3)
unit_test_can_OBJECTS = $(am_unit_test_can_OBJECTS)
#am__DEPENDENCIES_3 =  \
#	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_4 = $(am__DEPENDENCIES_3) \
	$(top_builddir)/src/libc/liblely-libc.la
unit_test_can_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LELY_UTIL_LIBS) \
	$(LELY_CAN_LIBS) $(am__DEPENDENCIES_2)
am__unit_test_co_SOURCES_DIST = override/call-wrapper.hpp \
	override/defs.hpp override/lely-defs.hpp \
	override/libc-defs.hpp override/libc-stdio.hpp \
	override/override-test-plugin.hpp \
	override/override-test-plugin.cpp lely-cpputest-ext.hpp \
	lely-unit-test.hpp tests-shared-main.cpp \
	co/holder/array-init.hpp co/holder/dev.hpp \
	co/holder/holder.hpp co/holder/obj.hpp co/holder/sub.hpp \
	co/test-crc.cpp co/test-dev.cpp co/test-obj.cpp \
	co/test-rpdo.cpp co/test-type.cpp co/test-val.cpp \
	override/lelyco-val.cpp
#am__objects_4 = override/lelyco-val.$(OBJEXT)
am__objects_5 = co/test-crc.$(OBJEXT) co/test-dev.$(OBJEXT) \
	co/test-obj.$(OBJEXT) co/test-rpdo.$(OBJEXT) \
	co/test-type.$(OBJEXT) co/test-val.$(OBJEXT) $(am__objects_4)
am_unit_test_co_OBJECTS = $(am__objects_2) $(am__objects_5)
unit_test_co_OBJECTS = $(am_unit_test_co_OBJECTS)
unit_test_co_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LELY_UTIL_LIBS) \
	$(LELY_CAN_LIBS) $(LELY_OVERRIDE_CO_VAL_LIB) $(LELY_CO_LIBS) \
	$(am__DEPENDENCIES_2)
unit_test_co_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(unit_test_co_LDFLAGS) $(LDFLAGS) -o $@
am__unit_test_util_SOURCES_DIST = override/call-wrapper.hpp \
	override/defs.hpp override/lely-defs.hpp \
	override/libc-defs.hpp override/libc-stdio.hpp \
	override/override-test-plugin.hpp \
	override/override-test-plugin.cpp lely-cpputest-ext.hpp \
	lely-unit-test.hpp tests-shared-main.cpp util/test-bits.cpp \
	util/test-cmp.cpp util/test-dllist.cpp util/test-endian.cpp \
	util/test-membuf.cpp util/test-pheap.cpp util/test-rbtree.cpp \
	util/test-time.cpp util/test-ustring.cpp util/test-util.cpp \
	util/test-bitset.cpp util/test-mutex.cpp util/test-sllist.cpp \
	util/test-spscring.cpp util/test-diag.cpp
am__objects_6 = util/test-bitset.$(OBJEXT)
am__objects_7 = util/test-mutex.$(OBJEXT)
am__objects_8 = util/test-sllist.$(OBJEXT) \
	util/test-spscring.$(OBJEXT)
#am__objects_9 = util/test-diag.$(OBJEXT)
am__objects_10 =  \
	util/test-diag.$(OBJEXT)
#am__objects_11 = util/test-diag.$(OBJEXT)
am__objects_12 = util/test-bits.$(OBJEXT) util/test-cmp.$(OBJEXT) \
	util/test-dllist.$(OBJEXT) util/test-endian.$(OBJEXT) \
	util/test-membuf.$(OBJEXT) util/test-pheap.$(OBJEXT) \
	util/test-rbtree.$(OBJEXT) util/test-time.$(OBJEXT) \
	util/test-ustring.$(OBJEXT) util/test-util.$(OBJEXT) \
	$(am__objects_6) $(am__objects_7) $(am__objects_8) \
	$(am__objects_9) $(am__objects_10) $(am__objects_11)
am_unit_test_util_OBJECTS = $(am__objects_2) $(am__objects_12)
unit_test_util_OBJECTS = $(am_unit_test_util_OBJECTS)
unit_test_util_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LELY_UTIL_LIBS) \
	$(am__DEPENDENCIES_2)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/test-cpputest.Po \
	./$(DEPDIR)/tests-shared-main.Po can/$(DEPDIR)/test-buf.Po \
	can/$(DEPDIR)/test-msg.Po can/$(DEPDIR)/test-net.Po \
	co/$(DEPDIR)/test-crc.Po co/$(DEPDIR)/test-dev.Po \
	co/$(DEPDIR)/test-obj.Po co/$(DEPDIR)/test-rpdo.Po \
	co/$(DEPDIR)/test-type.Po co/$(DEPDIR)/test-val.Po \
	override/$(DEPDIR)/lelyco-val.Po \
	override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Plo \
	override/$(DEPDIR)/override-test-plugin.Po \
	util/$(DEPDIR)/test-bits.Po util/$(DEPDIR)/test-bitset.Po \
	util/$(DEPDIR)/test-cmp.Po util/$(DEPDIR)/test-diag.Po \
	util/$(DEPDIR)/test-dllist.Po util/$(DEPDIR)/test-endian.Po \
	util/$(DEPDIR)/test-membuf.Po util/$(DEPDIR)/test-mutex.Po \
	util/$(DEPDIR)/test-pheap.Po util/$(DEPDIR)/test-rbtree.Po \
	util/$(DEPDIR)/test-sllist.Po util/$(DEPDIR)/test-spscring.Po \
	util/$(DEPDIR)/test-time.Po util/$(DEPDIR)/test-ustring.Po \
	util/$(DEPDIR)/test-util.Po
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(liblelyco_val_override_la_SOURCES) \
	$(test_cpputest_SOURCES) $(unit_test_can_SOURCES) \
	$(unit_test_co_SOURCES) $(unit_test_util_SOURCES)
DIST_SOURCES = $(am__liblelyco_val_override_la_SOURCES_DIST) \
	$(test_cpputest_SOURCES) $(unit_test_can_SOURCES) \
	$(am__unit_test_co_SOURCES_DIST) \
	$(am__unit_test_util_SOURCES_DIST)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__extra_recursive_targets = check-valgrind-recursive \
	check-valgrind-memcheck-recursive \
	check-valgrind-helgrind-recursive check-valgrind-drd-recursive \
	check-valgrind-sgcheck-recursive
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
AM_TESTSUITE_SUMMARY_HEADER = ' for $(PACKAGE_STRING)'
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS =  .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} '/home/rudranil/oddity_rover/build/lely_core_libraries/upstream/missing' aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
AS = as
AUTOCONF = ${SHELL} '/home/rudranil/oddity_rover/build/lely_core_libraries/upstream/missing' autoconf
AUTOHEADER = ${SHELL} '/home/rudranil/oddity_rover/build/lely_core_libraries/upstream/missing' autoheader
AUTOMAKE = ${SHELL} '/home/rudranil/oddity_rover/build/lely_core_libraries/upstream/missing' automake-1.16
AWK = mawk
BINFMT_EXEC = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Wall -Wextra -pedantic -Werror -Wno-static-in-inline -pthread -g -O2
CODE_COVERAGE_CFLAGS = 
CODE_COVERAGE_CPPFLAGS = 
CODE_COVERAGE_CXXFLAGS = 
CODE_COVERAGE_ENABLED = no
CODE_COVERAGE_LDFLAGS = 
CODE_COVERAGE_LIBS = 
CPP = gcc -E
CPPFLAGS = 
CPPUTEST_CFLAGS = 
CPPUTEST_LIBS =  $(am__append_2)
CSCOPE = cscope
CTAGS = ctags
CXX = g++ -std=gnu++11
CXXCPP = g++ -std=gnu++11 -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -Wextra -pedantic -Werror -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DOXYGEN = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ENABLE_VALGRIND_drd = no
ENABLE_VALGRIND_helgrind = no
ENABLE_VALGRIND_memcheck = no
ENABLE_VALGRIND_sgcheck = no
ETAGS = etags
EXEEXT = 
FGREP = /usr/bin/grep -F
GCOV = 
GENHTML = 
GREP = /usr/bin/grep
HAVE_CXX11 = 1
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LCOV = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = -lpthread 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAINT = 
MAKEINFO = ${SHELL} '/home/rudranil/oddity_rover/build/lely_core_libraries/upstream/missing' makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = lely-core
PACKAGE_BUGREPORT = 
PACKAGE_NAME = Lely core libraries
PACKAGE_STRING = Lely core libraries 2.4.0
PACKAGE_TARNAME = lely-core
PACKAGE_URL = 
PACKAGE_VERSION = 2.4.0
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_CXX = g++ -std=gnu++11
PTHREAD_LIBS = -lpthread
PYTHON = /usr/bin/python3
PYTHON3 = /usr/bin/python3
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = linux
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 3.10
RANLIB = ranlib
RC = 
RT_LIBS = -lrt
SCRIPT_EXEC = 
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VALGRIND = 
VALGRIND_ENABLED = no
VERSION = 2.4.0
VERSION_MAJOR = 2
VERSION_MINOR = 4
VERSION_PATCH = 0
abs_builddir = /home/rudranil/oddity_rover/build/lely_core_libraries/build/unit-tests
abs_srcdir = /home/rudranil/oddity_rover/build/lely_core_libraries/upstream/unit-tests
abs_top_builddir = /home/rudranil/oddity_rover/build/lely_core_libraries/build
abs_top_srcdir = /home/rudranil/oddity_rover/build/lely_core_libraries/upstream
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/rudranil/oddity_rover/build/lely_core_libraries/upstream/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/lely-core
pkgpythondir = ${pythondir}/lely-core
prefix = /home/rudranil/oddity_rover/install/lely_core_libraries
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${PYTHON_EXEC_PREFIX}/lib/python3.10/site-packages
pythondir = ${PYTHON_PREFIX}/lib/python3.10/site-packages
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/rudranil/oddity_rover/build/lely_core_libraries/upstream/unit-tests
sysconfdir = ${prefix}/etc
target = x86_64-pc-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../
top_builddir = ..
top_srcdir = /home/rudranil/oddity_rover/build/lely_core_libraries/upstream
valgrind_enabled_tools = 
valgrind_tools = memcheck helgrind drd sgcheck

# CppUTest library self-test
bin = test-cpputest unit-test-util unit-test-can unit-test-co
LELY_LIBC_LIBS = $(am__append_1) \
	$(top_builddir)/src/libc/liblely-libc.la
src_common = override/call-wrapper.hpp override/defs.hpp \
	override/lely-defs.hpp override/libc-defs.hpp \
	override/libc-stdio.hpp override/override-test-plugin.hpp \
	override/override-test-plugin.cpp lely-cpputest-ext.hpp \
	lely-unit-test.hpp tests-shared-main.cpp
test_cpputest_SOURCES = $(src_common) test-cpputest.cpp
test_cpputest_LDADD = $(CPPUTEST_LIBS)

# Override library (lely-core)
LELY_OVERRIDE_CO_VAL_LIB = $(am__append_3)
liblelyco_val_override_src = override/lelyco-val.hpp \
	override/lelyco-val.cpp
lib_LTLIBRARIES = liblelyco_val_override.la
liblelyco_val_override_la_LDFLAGS =  \
	-Wl,--as-needed
liblelyco_val_override_la_LIBADD =  \
	-ldl
liblelyco_val_override_la_CPPFLAGS = -I$(top_srcdir)/include -DLELY_ENABLE_SHARED=1
liblelyco_val_override_la_SOURCES = $(liblelyco_val_override_src)

# Utilities library tests
LELY_UTIL_LIBS = $(top_builddir)/src/util/liblely-util.la
src_util_tests = util/test-bits.cpp util/test-cmp.cpp \
	util/test-dllist.cpp util/test-endian.cpp util/test-membuf.cpp \
	util/test-pheap.cpp util/test-rbtree.cpp util/test-time.cpp \
	util/test-ustring.cpp util/test-util.cpp $(am__append_4) \
	$(am__append_5) $(am__append_6) $(am__append_7) \
	$(am__append_8) $(am__append_9)
unit_test_util_SOURCES = $(src_common) $(src_util_tests)
unit_test_util_LDADD = $(LELY_LIBC_LIBS) $(LELY_UTIL_LIBS) $(CPPUTEST_LIBS)

# CAN library tests
LELY_CAN_LIBS = $(top_builddir)/src/can/liblely-can.la
src_can_tests = can/test-buf.cpp can/test-msg.cpp can/test-net.cpp
unit_test_can_SOURCES = $(src_common) $(src_can_tests)
unit_test_can_LDADD = $(LELY_LIBC_LIBS) $(LELY_UTIL_LIBS) $(LELY_CAN_LIBS) $(CPPUTEST_LIBS)

# CANopen library tests
LELY_CO_LIBS = $(top_builddir)/src/co/liblely-co.la
src_co_tests = co/holder/array-init.hpp co/holder/dev.hpp \
	co/holder/holder.hpp co/holder/obj.hpp co/holder/sub.hpp \
	co/test-crc.cpp co/test-dev.cpp co/test-obj.cpp \
	co/test-rpdo.cpp co/test-type.cpp co/test-val.cpp \
	$(am__append_10)
unit_test_co_SOURCES = $(src_common) $(src_co_tests)
unit_test_co_LDADD = $(LELY_LIBC_LIBS) $(LELY_UTIL_LIBS) $(LELY_CAN_LIBS) $(LELY_OVERRIDE_CO_VAL_LIB) $(LELY_CO_LIBS) $(CPPUTEST_LIBS)
#unit_test_co_LDFLAGS = -Wl,--wrap=co_val_read \
#	-Wl,--wrap=co_val_write \
#	-Wl,--wrap=co_val_make \
#	-Wl,--wrap=co_val_init_min \
#	-Wl,--wrap=co_val_init_max \
#	-Wl,--wrap=co_val_init
#unit_test_co_LDFLAGS = -all-static

# Compilation flags
AM_CPPFLAGS = -I$(top_srcdir)/include -DTEST_SRCDIR=\"${srcdir}\" \
	-DLELY_NO_CXX=1 $(am__append_11) $(CPPUTEST_CFLAGS) \
	$(am__append_12) $(am__append_13)
AM_CFLAGS = $(am__append_14)
AM_CXXFLAGS = $(am__append_15)
AM_LDFLAGS = $(am__append_16)
TESTS = $(check_PROGRAMS)
EXEC = $(SHELL) $(top_builddir)/exec-wrapper.sh
LOG_COMPILER = $(EXEC)
#LOG_COMPILER = $(SHELL) $(top_builddir)/lcov-wrapper.sh
#AM_TESTS_ENVIRONMENT =  \
#	EXEC_WRAPPER="$(EXEC)" ;
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign unit-tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign unit-tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}
override/$(am__dirstamp):
	@$(MKDIR_P) override
	@: > override/$(am__dirstamp)
override/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) override/$(DEPDIR)
	@: > override/$(DEPDIR)/$(am__dirstamp)
override/liblelyco_val_override_la-lelyco-val.lo:  \
	override/$(am__dirstamp) override/$(DEPDIR)/$(am__dirstamp)

liblelyco_val_override.la: $(liblelyco_val_override_la_OBJECTS) $(liblelyco_val_override_la_DEPENDENCIES) $(EXTRA_liblelyco_val_override_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(liblelyco_val_override_la_LINK) $(am_liblelyco_val_override_la_rpath) $(liblelyco_val_override_la_OBJECTS) $(liblelyco_val_override_la_LIBADD) $(LIBS)
override/override-test-plugin.$(OBJEXT): override/$(am__dirstamp) \
	override/$(DEPDIR)/$(am__dirstamp)

test-cpputest$(EXEEXT): $(test_cpputest_OBJECTS) $(test_cpputest_DEPENDENCIES) $(EXTRA_test_cpputest_DEPENDENCIES) 
	@rm -f test-cpputest$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(test_cpputest_OBJECTS) $(test_cpputest_LDADD) $(LIBS)
can/$(am__dirstamp):
	@$(MKDIR_P) can
	@: > can/$(am__dirstamp)
can/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) can/$(DEPDIR)
	@: > can/$(DEPDIR)/$(am__dirstamp)
can/test-buf.$(OBJEXT): can/$(am__dirstamp) \
	can/$(DEPDIR)/$(am__dirstamp)
can/test-msg.$(OBJEXT): can/$(am__dirstamp) \
	can/$(DEPDIR)/$(am__dirstamp)
can/test-net.$(OBJEXT): can/$(am__dirstamp) \
	can/$(DEPDIR)/$(am__dirstamp)

unit-test-can$(EXEEXT): $(unit_test_can_OBJECTS) $(unit_test_can_DEPENDENCIES) $(EXTRA_unit_test_can_DEPENDENCIES) 
	@rm -f unit-test-can$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(unit_test_can_OBJECTS) $(unit_test_can_LDADD) $(LIBS)
co/$(am__dirstamp):
	@$(MKDIR_P) co
	@: > co/$(am__dirstamp)
co/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) co/$(DEPDIR)
	@: > co/$(DEPDIR)/$(am__dirstamp)
co/test-crc.$(OBJEXT): co/$(am__dirstamp) co/$(DEPDIR)/$(am__dirstamp)
co/test-dev.$(OBJEXT): co/$(am__dirstamp) co/$(DEPDIR)/$(am__dirstamp)
co/test-obj.$(OBJEXT): co/$(am__dirstamp) co/$(DEPDIR)/$(am__dirstamp)
co/test-rpdo.$(OBJEXT): co/$(am__dirstamp) \
	co/$(DEPDIR)/$(am__dirstamp)
co/test-type.$(OBJEXT): co/$(am__dirstamp) \
	co/$(DEPDIR)/$(am__dirstamp)
co/test-val.$(OBJEXT): co/$(am__dirstamp) co/$(DEPDIR)/$(am__dirstamp)
override/lelyco-val.$(OBJEXT): override/$(am__dirstamp) \
	override/$(DEPDIR)/$(am__dirstamp)

unit-test-co$(EXEEXT): $(unit_test_co_OBJECTS) $(unit_test_co_DEPENDENCIES) $(EXTRA_unit_test_co_DEPENDENCIES) 
	@rm -f unit-test-co$(EXEEXT)
	$(AM_V_CXXLD)$(unit_test_co_LINK) $(unit_test_co_OBJECTS) $(unit_test_co_LDADD) $(LIBS)
util/$(am__dirstamp):
	@$(MKDIR_P) util
	@: > util/$(am__dirstamp)
util/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) util/$(DEPDIR)
	@: > util/$(DEPDIR)/$(am__dirstamp)
util/test-bits.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-cmp.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-dllist.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-endian.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-membuf.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-pheap.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-rbtree.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-time.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-ustring.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-util.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-bitset.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-mutex.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-sllist.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-spscring.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
util/test-diag.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)

unit-test-util$(EXEEXT): $(unit_test_util_OBJECTS) $(unit_test_util_DEPENDENCIES) $(EXTRA_unit_test_util_DEPENDENCIES) 
	@rm -f unit-test-util$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(unit_test_util_OBJECTS) $(unit_test_util_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f can/*.$(OBJEXT)
	-rm -f co/*.$(OBJEXT)
	-rm -f override/*.$(OBJEXT)
	-rm -f override/*.lo
	-rm -f util/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/test-cpputest.Po # am--include-marker
include ./$(DEPDIR)/tests-shared-main.Po # am--include-marker
include can/$(DEPDIR)/test-buf.Po # am--include-marker
include can/$(DEPDIR)/test-msg.Po # am--include-marker
include can/$(DEPDIR)/test-net.Po # am--include-marker
include co/$(DEPDIR)/test-crc.Po # am--include-marker
include co/$(DEPDIR)/test-dev.Po # am--include-marker
include co/$(DEPDIR)/test-obj.Po # am--include-marker
include co/$(DEPDIR)/test-rpdo.Po # am--include-marker
include co/$(DEPDIR)/test-type.Po # am--include-marker
include co/$(DEPDIR)/test-val.Po # am--include-marker
include override/$(DEPDIR)/lelyco-val.Po # am--include-marker
include override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Plo # am--include-marker
include override/$(DEPDIR)/override-test-plugin.Po # am--include-marker
include util/$(DEPDIR)/test-bits.Po # am--include-marker
include util/$(DEPDIR)/test-bitset.Po # am--include-marker
include util/$(DEPDIR)/test-cmp.Po # am--include-marker
include util/$(DEPDIR)/test-diag.Po # am--include-marker
include util/$(DEPDIR)/test-dllist.Po # am--include-marker
include util/$(DEPDIR)/test-endian.Po # am--include-marker
include util/$(DEPDIR)/test-membuf.Po # am--include-marker
include util/$(DEPDIR)/test-mutex.Po # am--include-marker
include util/$(DEPDIR)/test-pheap.Po # am--include-marker
include util/$(DEPDIR)/test-rbtree.Po # am--include-marker
include util/$(DEPDIR)/test-sllist.Po # am--include-marker
include util/$(DEPDIR)/test-spscring.Po # am--include-marker
include util/$(DEPDIR)/test-time.Po # am--include-marker
include util/$(DEPDIR)/test-ustring.Po # am--include-marker
include util/$(DEPDIR)/test-util.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

override/liblelyco_val_override_la-lelyco-val.lo: override/lelyco-val.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblelyco_val_override_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT override/liblelyco_val_override_la-lelyco-val.lo -MD -MP -MF override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Tpo -c -o override/liblelyco_val_override_la-lelyco-val.lo `test -f 'override/lelyco-val.cpp' || echo '$(srcdir)/'`override/lelyco-val.cpp
	$(AM_V_at)$(am__mv) override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Tpo override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Plo
#	$(AM_V_CXX)source='override/lelyco-val.cpp' object='override/liblelyco_val_override_la-lelyco-val.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblelyco_val_override_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o override/liblelyco_val_override_la-lelyco-val.lo `test -f 'override/lelyco-val.cpp' || echo '$(srcdir)/'`override/lelyco-val.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
	-rm -rf override/.libs override/_libs
check-valgrind-local: 
check-valgrind-memcheck-local: 
check-valgrind-helgrind-local: 
check-valgrind-drd-local: 
check-valgrind-sgcheck-local: 

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary"$(AM_TESTSUITE_SUMMARY_HEADER)"$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS: $(check_PROGRAMS)
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
test-cpputest.log: test-cpputest$(EXEEXT)
	@p='test-cpputest$(EXEEXT)'; \
	b='test-cpputest'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
unit-test-util.log: unit-test-util$(EXEEXT)
	@p='unit-test-util$(EXEEXT)'; \
	b='unit-test-util'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
unit-test-can.log: unit-test-can$(EXEEXT)
	@p='unit-test-can$(EXEEXT)'; \
	b='unit-test-can'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
unit-test-co.log: unit-test-co$(EXEEXT)
	@p='unit-test-co$(EXEEXT)'; \
	b='unit-test-co'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.test$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LTLIBRARIES)
install-checkPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f can/$(DEPDIR)/$(am__dirstamp)
	-rm -f can/$(am__dirstamp)
	-rm -f co/$(DEPDIR)/$(am__dirstamp)
	-rm -f co/$(am__dirstamp)
	-rm -f override/$(DEPDIR)/$(am__dirstamp)
	-rm -f override/$(am__dirstamp)
	-rm -f util/$(DEPDIR)/$(am__dirstamp)
	-rm -f util/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
check-valgrind: check-valgrind-am

check-valgrind-am: check-valgrind-local

check-valgrind-drd: check-valgrind-drd-am

check-valgrind-drd-am: check-valgrind-drd-local

check-valgrind-helgrind: check-valgrind-helgrind-am

check-valgrind-helgrind-am: check-valgrind-helgrind-local

check-valgrind-memcheck: check-valgrind-memcheck-am

check-valgrind-memcheck-am: check-valgrind-memcheck-local

check-valgrind-sgcheck: check-valgrind-sgcheck-am

check-valgrind-sgcheck-am: check-valgrind-sgcheck-local

clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/test-cpputest.Po
	-rm -f ./$(DEPDIR)/tests-shared-main.Po
	-rm -f can/$(DEPDIR)/test-buf.Po
	-rm -f can/$(DEPDIR)/test-msg.Po
	-rm -f can/$(DEPDIR)/test-net.Po
	-rm -f co/$(DEPDIR)/test-crc.Po
	-rm -f co/$(DEPDIR)/test-dev.Po
	-rm -f co/$(DEPDIR)/test-obj.Po
	-rm -f co/$(DEPDIR)/test-rpdo.Po
	-rm -f co/$(DEPDIR)/test-type.Po
	-rm -f co/$(DEPDIR)/test-val.Po
	-rm -f override/$(DEPDIR)/lelyco-val.Po
	-rm -f override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Plo
	-rm -f override/$(DEPDIR)/override-test-plugin.Po
	-rm -f util/$(DEPDIR)/test-bits.Po
	-rm -f util/$(DEPDIR)/test-bitset.Po
	-rm -f util/$(DEPDIR)/test-cmp.Po
	-rm -f util/$(DEPDIR)/test-diag.Po
	-rm -f util/$(DEPDIR)/test-dllist.Po
	-rm -f util/$(DEPDIR)/test-endian.Po
	-rm -f util/$(DEPDIR)/test-membuf.Po
	-rm -f util/$(DEPDIR)/test-mutex.Po
	-rm -f util/$(DEPDIR)/test-pheap.Po
	-rm -f util/$(DEPDIR)/test-rbtree.Po
	-rm -f util/$(DEPDIR)/test-sllist.Po
	-rm -f util/$(DEPDIR)/test-spscring.Po
	-rm -f util/$(DEPDIR)/test-time.Po
	-rm -f util/$(DEPDIR)/test-ustring.Po
	-rm -f util/$(DEPDIR)/test-util.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/test-cpputest.Po
	-rm -f ./$(DEPDIR)/tests-shared-main.Po
	-rm -f can/$(DEPDIR)/test-buf.Po
	-rm -f can/$(DEPDIR)/test-msg.Po
	-rm -f can/$(DEPDIR)/test-net.Po
	-rm -f co/$(DEPDIR)/test-crc.Po
	-rm -f co/$(DEPDIR)/test-dev.Po
	-rm -f co/$(DEPDIR)/test-obj.Po
	-rm -f co/$(DEPDIR)/test-rpdo.Po
	-rm -f co/$(DEPDIR)/test-type.Po
	-rm -f co/$(DEPDIR)/test-val.Po
	-rm -f override/$(DEPDIR)/lelyco-val.Po
	-rm -f override/$(DEPDIR)/liblelyco_val_override_la-lelyco-val.Plo
	-rm -f override/$(DEPDIR)/override-test-plugin.Po
	-rm -f util/$(DEPDIR)/test-bits.Po
	-rm -f util/$(DEPDIR)/test-bitset.Po
	-rm -f util/$(DEPDIR)/test-cmp.Po
	-rm -f util/$(DEPDIR)/test-diag.Po
	-rm -f util/$(DEPDIR)/test-dllist.Po
	-rm -f util/$(DEPDIR)/test-endian.Po
	-rm -f util/$(DEPDIR)/test-membuf.Po
	-rm -f util/$(DEPDIR)/test-mutex.Po
	-rm -f util/$(DEPDIR)/test-pheap.Po
	-rm -f util/$(DEPDIR)/test-rbtree.Po
	-rm -f util/$(DEPDIR)/test-sllist.Po
	-rm -f util/$(DEPDIR)/test-spscring.Po
	-rm -f util/$(DEPDIR)/test-time.Po
	-rm -f util/$(DEPDIR)/test-ustring.Po
	-rm -f util/$(DEPDIR)/test-util.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLTLIBRARIES

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am check-valgrind-am check-valgrind-drd-am \
	check-valgrind-drd-local check-valgrind-helgrind-am \
	check-valgrind-helgrind-local check-valgrind-local \
	check-valgrind-memcheck-am check-valgrind-memcheck-local \
	check-valgrind-sgcheck-am check-valgrind-sgcheck-local clean \
	clean-checkPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-libLTLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am \
	uninstall-libLTLIBRARIES

.PRECIOUS: Makefile

#
# Code coverage
#
# Optional:
#  - CODE_COVERAGE_DIRECTORY: Top-level directory for code coverage reporting.
#    Multiple directories may be specified, separated by whitespace.
#    (Default: $(top_builddir))
#  - CODE_COVERAGE_OUTPUT_FILE: Filename and path for the .info file generated
#    by lcov for code coverage. (Default:
#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info)
#  - CODE_COVERAGE_OUTPUT_DIRECTORY: Directory for generated code coverage
#    reports to be created. (Default:
#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage)
#  - CODE_COVERAGE_BRANCH_COVERAGE: Set to 1 to enforce branch coverage,
#    set to 0 to disable it and leave empty to stay with the default.
#    (Default: empty)
#  - CODE_COVERAGE_LCOV_SHOPTS_DEFAULT: Extra options shared between both lcov
#    instances. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
#  - CODE_COVERAGE_LCOV_SHOPTS: Extra options to shared between both lcov
#    instances. (Default: $CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
#  - CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH: --gcov-tool pathtogcov
#  - CODE_COVERAGE_LCOV_OPTIONS_DEFAULT: Extra options to pass to the
#    collecting lcov instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
#  - CODE_COVERAGE_LCOV_OPTIONS: Extra options to pass to the collecting lcov
#    instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
#  - CODE_COVERAGE_LCOV_RMOPTS_DEFAULT: Extra options to pass to the filtering
#    lcov instance. (Default: empty)
#  - CODE_COVERAGE_LCOV_RMOPTS: Extra options to pass to the filtering lcov
#    instance. (Default: $CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
#  - CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT: Extra options to pass to the
#    genhtml instance. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
#  - CODE_COVERAGE_GENHTML_OPTIONS: Extra options to pass to the genhtml
#    instance. (Default: $CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore
#
# The generated report will be titled using the $(PACKAGE_NAME) and
# $(PACKAGE_VERSION). In order to add the current git hash to the title,
# use the git-version-gen script, available online.

# Optional variables
CODE_COVERAGE_DIRECTORY ?= $(top_builddir)
CODE_COVERAGE_OUTPUT_FILE ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info
CODE_COVERAGE_OUTPUT_DIRECTORY ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage
CODE_COVERAGE_BRANCH_COVERAGE ?=
CODE_COVERAGE_LCOV_SHOPTS_DEFAULT ?= $(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
--rc lcov_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
CODE_COVERAGE_LCOV_SHOPTS ?= $(CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH ?= --gcov-tool "$(GCOV)"
CODE_COVERAGE_LCOV_OPTIONS_DEFAULT ?= $(CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
CODE_COVERAGE_LCOV_OPTIONS ?= $(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
CODE_COVERAGE_LCOV_RMOPTS_DEFAULT ?=
CODE_COVERAGE_LCOV_RMOPTS ?= $(CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT ?=\
$(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
--rc genhtml_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
CODE_COVERAGE_GENHTML_OPTIONS ?= $(CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
CODE_COVERAGE_IGNORE_PATTERN ?=

code_coverage_v_lcov_cap = $(code_coverage_v_lcov_cap_$(V))
code_coverage_v_lcov_cap_ = $(code_coverage_v_lcov_cap_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_lcov_cap_0 = @echo "  LCOV   --capture"\
 $(CODE_COVERAGE_OUTPUT_FILE);
code_coverage_v_lcov_ign = $(code_coverage_v_lcov_ign_$(V))
code_coverage_v_lcov_ign_ = $(code_coverage_v_lcov_ign_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_lcov_ign_0 = @echo "  LCOV   --remove /tmp/*"\
 $(CODE_COVERAGE_IGNORE_PATTERN);
code_coverage_v_genhtml = $(code_coverage_v_genhtml_$(V))
code_coverage_v_genhtml_ = $(code_coverage_v_genhtml_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_genhtml_0 = @echo "  GEN   " $(CODE_COVERAGE_OUTPUT_DIRECTORY);
code_coverage_quiet = $(code_coverage_quiet_$(V))
code_coverage_quiet_ = $(code_coverage_quiet_$(AM_DEFAULT_VERBOSITY))
code_coverage_quiet_0 = --quiet

# sanitizes the test-name: replaces with underscores: dashes and dots
code_coverage_sanitize = $(subst -,_,$(subst .,_,$(1)))

# Use recursive makes in order to ignore errors during check
check-code-coverage: 
	@echo "Need to reconfigure with --enable-code-coverage"


# Capture code coverage data
code-coverage-capture: code-coverage-capture-hook
	@echo "Need to reconfigure with --enable-code-coverage"


# Hook rule executed before code-coverage-capture, overridable by the user
code-coverage-capture-hook:



GITIGNOREFILES ?=
GITIGNOREFILES += $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_DIRECTORY)

AM_DISTCHECK_CONFIGURE_FLAGS ?=
AM_DISTCHECK_CONFIGURE_FLAGS += --disable-code-coverage

.PHONY: check-code-coverage code-coverage-capture code-coverage-capture-hook code-coverage-clean



# Valgrind check
#
# Optional:
#  - VALGRIND_SUPPRESSIONS_FILES: Space-separated list of Valgrind suppressions
#    files to load. (Default: empty)
#  - VALGRIND_FLAGS: General flags to pass to all Valgrind tools.
#    (Default: --num-callers=30)
#  - VALGRIND_$toolname_FLAGS: Flags to pass to Valgrind $toolname (one of:
#    memcheck, helgrind, drd, sgcheck). (Default: various)

# Optional variables
VALGRIND_SUPPRESSIONS ?= $(addprefix --suppressions=,$(VALGRIND_SUPPRESSIONS_FILES))
VALGRIND_FLAGS ?= --num-callers=30
VALGRIND_memcheck_FLAGS ?= --leak-check=full --show-reachable=no
VALGRIND_helgrind_FLAGS ?= --history-level=approx
VALGRIND_drd_FLAGS ?=
VALGRIND_sgcheck_FLAGS ?=

# Internal use
valgrind_log_files = $(addprefix test-suite-,$(addsuffix .log,$(valgrind_tools)))

valgrind_memcheck_flags = --tool=memcheck $(VALGRIND_memcheck_FLAGS)
valgrind_helgrind_flags = --tool=helgrind $(VALGRIND_helgrind_FLAGS)
valgrind_drd_flags = --tool=drd $(VALGRIND_drd_FLAGS)
valgrind_sgcheck_flags = --tool=exp-sgcheck $(VALGRIND_sgcheck_FLAGS)

valgrind_quiet = $(valgrind_quiet_$(V))
valgrind_quiet_ = $(valgrind_quiet_$(AM_DEFAULT_VERBOSITY))
valgrind_quiet_0 = --quiet
valgrind_v_use   = $(valgrind_v_use_$(V))
valgrind_v_use_  = $(valgrind_v_use_$(AM_DEFAULT_VERBOSITY))
valgrind_v_use_0 = @echo "  USE   " $(patsubst check-valgrind-%-local,%,$@):;

# Support running with and without libtool.
ifneq ($(LIBTOOL),)
valgrind_lt = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=execute
else
valgrind_lt =
endif

# Use recursive makes in order to ignore errors during check
check-valgrind-local:
ifeq ($(VALGRIND_ENABLED),yes)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -k \
		$(foreach tool, $(valgrind_enabled_tools), check-valgrind-$(tool))
else
	@echo "Need to reconfigure with --enable-valgrind"
endif

# Valgrind running
VALGRIND_TESTS_ENVIRONMENT = \
	$(TESTS_ENVIRONMENT) \
	env VALGRIND=$(VALGRIND) \
	G_SLICE=always-malloc,debug-blocks \
	G_DEBUG=fatal-warnings,fatal-criticals,gc-friendly

VALGRIND_LOG_COMPILER = \
	$(valgrind_lt) \
	$(VALGRIND) $(VALGRIND_SUPPRESSIONS) --error-exitcode=1 $(VALGRIND_FLAGS)

define valgrind_tool_rule
check-valgrind-$(1)-local:
ifeq ($$(VALGRIND_ENABLED)-$$(ENABLE_VALGRIND_$(1)),yes-yes)
ifneq ($$(TESTS),)
	$$(valgrind_v_use)$$(MAKE) check-TESTS \
		TESTS_ENVIRONMENT="$$(VALGRIND_TESTS_ENVIRONMENT)" \
		LOG_COMPILER="$$(VALGRIND_LOG_COMPILER)" \
		LOG_FLAGS="$$(valgrind_$(1)_flags)" \
		TEST_SUITE_LOG=test-suite-$(1).log
endif
else ifeq ($$(VALGRIND_ENABLED),yes)
	@echo "Need to reconfigure with --enable-valgrind-$(1)"
else
	@echo "Need to reconfigure with --enable-valgrind"
endif
endef

$(foreach tool,$(valgrind_tools),$(eval $(call valgrind_tool_rule,$(tool))))

AM_DISTCHECK_CONFIGURE_FLAGS ?=
AM_DISTCHECK_CONFIGURE_FLAGS += --disable-valgrind

MOSTLYCLEANFILES ?=
MOSTLYCLEANFILES += $(valgrind_log_files)

.PHONY: check-valgrind $(addprefix check-valgrind-,$(valgrind_tools))


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
